<resources>
    <string name="app_name">eNursing</string>
    <string name="open">Open</string>
    <string name="close">Close</string>
    <string name="definition">History of nursing can be viewed from 5 perspectives and how they have influenced nursing practice in the past and now.\n\n
Women’s roles and Status\n\n
- Traditional female role of being a daughter, sister, wife and mother has always included the care and nurturing of other family members including infants and children\n\n
- It can be said that nursing have its roots in the “home”\n\n
- Women were meant to be subservient and dependent, such that they can be called upon to care for others in the community.\n\n
- Hence, traditional nursing role includes providing humanistic caring, nurturing, comforting and supporting\n\n
</string>
    <string name="gdg_description_terminal">Religion played a significant role in the development of nursing through the need to practice biblical injunctions such as benevolence.\n\n
<b>-</b> Fabiola, a wealthy matron of the Roman Empire provided houses of care and healing for the poor, sick and the homeless.\n\n
<b>-</b> The crusades (the formation of several orders of knights) provided nursing care and injured comrades; built hospitals and also cared for people with leprosy, syphilis and chronic skin conditions.\n\n
<b>-</b> The deaconess groups of the Roman Empire during the third and fourth centuries, though suppressed during the middle Ages by Western churches, resurfaced.\n\n
<b>-</b> In 1836, Theodore Fliedner reinstituted the order of deaconesses. A small hospital and training school was opened in Kaiserswerth, Germany where Florence Nightingale received her nursing training.\n\n
<b>-</b> Religious values such as self-denial, spiritual calling, devotion to duty and hard work dominated the practice of nursing, which often times resulted in exploitation and few monetary rewards.
</string>
    <string name="input_output"><b>2. Input/Output:</b> A parallelogram denotes any function of input/output type. Program instructions that take input from input devices and display output on output devices are indicated with parallelogram in a flowchart. "</string>
    <string name="process"><b>3. Processing:</b> A box represents arithmetic instructions. All arithmetic processes such as adding, subtracting, multiplication and division are indicated by action or process symbol.</string>
    <string name="decision"><b>4. Decision:</b> Diamond symbol represents a decision point. Decision based operations such as yes/no question or true/false are indicated by diamond in flowchart. "</string>
    <string name="connectors"><b>5. Connectors:</b> Whenever flowchart becomes complex or it spreads over more than one page, it is useful to use connectors to avoid any confusions. It is represented by a circle. "</string>
    <string name="flowline"> <b> 6. Flow lines:</b> Flow lines indicate the exact sequence in which instructions are executed. Arrows represent the direction of flow of control and relationship among different symbols of flowchart. "</string>
    <string name="rules_flow"> <b>-</b> In history, wars necessitated the need for nurses.\n\n
<b>-</b>The Crimean war of 1854-1856 was not an exception.\n\n
<b>-</b>There was a gross inadequacy in the care given to wounded soldiers.\n\n
<b>-</b>Florence Nightingale played a significant role in solving the problem\n\n
<b>-</b>On the delegation of Sir Sydney Herbert of the British War Department, she recruited nurses to provide care to the sick and injured in the Crimea.\n\n
<b>-</b>They transformed the military hospitals by setting up sanitation practices.\n\n
<b>-</b>The American Civil War of 1861-1865 had Hariet Tubman and Sojourner Truth providing care and safety to slaves on the run.\n\n
<b>-</b>Mother Biekerdyke and Clara Barton gave care to wounded and dying soldiers on the battlefield.\n\n
<b>-</b>Walt Whitman and Louisa May Alcott volunteered to give care to the injured soldiers in military hospitals.
</string>
    <string name="advantages_flow"><b>1.</b> Flowcharts are a better way of communicating the logic of the system. \n\n<b>2.</b> Flowcharts act as a guide for blueprint during program designed. \n\n<b>3.</b> Flowcharts help in debugging process. \n\n<b>4.</b> With the help of flowcharts programs can be easily analyzed. \n\n<b>5.</b> It provides better documentation. \n\n<b>6.</b> Flowcharts serve as a good proper documentation. \n\n<b>7.</b> Easy to trace errors in the software. \n\n<b>8.</b> Easy to understand. \n\n<b>9.</b> The flowchart can be reused for inconvenience in the future. \n\n<b>10.</b> It helps to provide correct logic.</string>
    <string name="disadvantages_flow"><b>1.</b> It is difficult to draw flowcharts for large and complex programs. \n\n<b>2.</b> There is no standard to determine the amount of detail. \n\n<b>3.</b> Difficult to reproduce the flowcharts. \n\n<b>4.</b> It is very difficult to modify the Flowchart. \n\n<b>5.</b> Making a flowchart is costly. \n\n<b>6.</b> Some developer thinks that it is waste of time. \n\n<b>7.</b> It makes software processes low. \n\n<b>8.</b> If changes are done in software, then the flowchart must be redrawn\n\n</string>
    <string name="algo_def">The word Algorithm means ”A  set of rules to be followed in calculations or other problem-solving operations” Or ”A procedure for solving a mathematical problem in a finite number of steps that frequently by recursive operations “.   \n\nTherefore Algorithm refers to a sequence of finite steps to solve a particular problem.</string>
    <string name="types_algo">There are several types of algorithms available. \n\nSome important algorithms are:  \n\n<b>1. Brute Force Algorithm:</b> It is the simplest approach for a problem. A brute force algorithm is the first approach that comes to finding when we see a problem.</string>
    <string name="recursive_algo"><b>2. Recursive Algorithm:</b> A recursive algorithm is based on recursion. In this case, a problem is broken into several sub-parts and called the same function again and again.</string>
    <string name="back_tracking_algo"><b>3. Backtracking Algorithm:</b> The backtracking algorithm basically builds the solution by searching among all possible solutions. Using this algorithm, we keep on building the solution following criteria. Whenever a solution fails we trace back to the failure point and build on the next solution and continue this process till we find the solution or all possible solutions are looked after.</string>
    <string name="searching_algo"><b>4. Searching Algorithm:</b> Searching algorithms are the ones that are used for searching elements or groups of elements from a particular data structure. They can be of different types based on their approach or the data structure in which the element should be found.</string>
    <string name="sorting_algo"><b>5. Sorting Algorithm:</b> Sorting is arranging a group of data in a particular manner according to the requirement. The algorithms which help in performing this function are called sorting algorithms. Generally sorting algorithms are used to sort groups of data in an increasing or decreasing manner.</string>
    <string name="divide_and_conquer"><b>7. Divide and Conquer Algorithm:</b> This algorithm breaks a problem into sub-problems, solves a single sub-problem and merges the solutions together to get the final solution. It consists of the following three steps:  \n- Divide \n- Solve \n- Combine</string>
    <string name="characteristic_algo">Algorithms generally have the following characteristics: \n\n<b>Input:</b> An algorithm requires some input values. An algorithm can be given a value other than 0 as input.
        \n\n<b>Output:</b> At the end of an algorithm, you will have one or more outcomes.
        \n\n<b>Unambiguity:</b> A perfect algorithm is defined as unambiguous, which means that its instructions should be clear and straightforward.
        \n\n<b>Finiteness:</b> An algorithm must be finite. Finiteness in this context means that the algorithm should have a limited number of instructions, i.e., the instructions should be countable.
        \n\n<b>Effectiveness:</b> Because each instruction in an algorithm affects the overall process, it should be adequate.
        \n\n<b>Language independence:</b> An algorithm must be language-independent, which means that its instructions can be implemented in any language and produce the same results</string>
    <string name="algo_func">You require algorithms for the following reasons:  \n\n<b>Scalability</b> It aids in your understanding of scalability. When you have a sizable real-world problem, you must break it down into small steps to analyze it quickly.  \n\n<b>Performance</b> The real world is challenging to break down into smaller steps. If a problem can be easily divided into smaller steps, it indicates that the problem is feasible.</string>
    <string name="algo_how_write">There are no well-defined standards for writing algorithms. It is, however, a problem that is resource-dependent. \n\nAlgorithms are never written with a specific programming language in mind. As you all know, basic code constructs such as loops like do, for, while, all programming languages share flow control such as if-else, and so on. An algorithm can be written using these common constructs. \n\nAlgorithms are typically written in a step-by-step fashion, but this is not always the case. Algorithm writing is a process that occurs after the problem domain has been well-defined. That is, you must be aware of the problem domain for which you are developing a solution.</string>
    <string name="examples_flow">The following are examples of flowcharts: \n\n1. Draw a flowchart to input two numbers from the user and display the largest of two numbers:</string>
    <string name="example_algo">The following are examples of an algorithm:\n\n<b>Problem 1:</b> Create an algorithm that multiplies two numbers and  displays the output.\n\nStep 1 − Start\n\n

Step 2 − declare three integers x, y &amp; z\n\n

Step 3 − define values of x &amp; y\n\n

Step 4 − multiply values of x &amp; y\n\n

Step 5 − store result of step 4 to z\n\n

Step 6 − print z\n\n

        Step 7 − Stop\n\n<b>Problem 2:</b> Write an algorithm to convert temperature from Fahrenheit to Celsius:\n\nStep 1 − Start\n\n

Step 2 − Input two numbers say A and B\n\n

Step 3 − SUM = A+B\n\n

Step 4 − Display SUM\n\n

Step 5 − Stop\n\n<b>Problem 3:</b> Write an algorithm to find the area and perimeter of a square:\n\nL: Side length of square\n AREA: Area of square\nPERIMETER: Perimeter of square\n\nStep 1 − Start\n\n

Step 2 − Input side length of square, say L\n\n

Step 3 − AREA = L * L\n\n

Step 4 − PERIMETER = 4 * L\n\n

Step 5 − Display AREA, PERIMETER\n\n
        Step 6 − Stop</string>
    <string name="examples_flow2">2. Find the largest among three different numbers entered by the user.</string>
    <string name="examples_flow3">3. Find all the roots of a quadratic equation ax2+bx+c=0</string>
    <string name="examples_flow4">4. Determine and Output Whether Number N is Even or Odd.</string>
</resources>